syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional macsec_macsec jnpr_macsec_macsec_ext = 167;
}

message macsec_macsec {
   optional interfaces_type interfaces = 152;
   message interfaces_type {
      message interface_list {
         optional string name = 51 [(telemetry_options).is_key = true];
         optional state_type state = 151;
         message state_type {
            optional counters_type counters = 151;
            message counters_type {
               optional uint64 tx_untagged_pkts = 104;
               optional uint64 rx_untagged_pkts = 52;
               optional uint64 rx_badtag_pkts = 53;
               optional uint64 rx_unknownsci_pkts = 54;
               optional uint64 rx_nosci_pkts = 55;
               optional uint64 jnx_tx_toolong_packets = 105;
               optional uint64 jnx_rx_notag_packets = 67;
               optional uint64 jnx_rx_control_packets = 68;
               optional uint64 jnx_rx_tagged_miss_packets = 69;
               optional uint64 jnx_rx_untagged_hit_packets = 70;
               optional uint64 jnx_rx_control_pass_packets = 71;
               optional uint64 jnx_rx_control_fail_packets = 72;
               optional uint64 jnx_rx_uncontrol_pass_packets = 73;
               optional uint64 jnx_rx_uncontrol_fail_packets = 74;
               optional uint64 jnx_rx_hit_dropped_packets = 75;
               optional uint64 jnx_rx_late_packets = 76;
               optional uint64 jnx_rx_delayed_packets = 77;
               optional uint64 jnx_rx_unchecked_packets = 78;
               optional uint64 jnx_rx_notvalid_packets = 79;
               optional uint64 jnx_rx_notusing_sa_packets = 80;
               optional uint64 jnx_rx_unused_sa_packets = 81;
            }
         }
         optional scsa_tx_type scsa_tx = 153;
         message scsa_tx_type {
            message scsa_tx_list {
               optional string sci_tx = 151 [(telemetry_options).is_key = true];
               optional state_type state = 152;
               message state_type {
                  optional string sci_tx = 151;
                  optional counters_type counters = 152;
                  message counters_type {
                     optional uint64 sc_auth_only = 59;
                     optional uint64 sc_encrypted = 60;
                     optional uint64 sa_auth_only = 61;
                     optional uint64 sa_encrypted = 62;
                     optional uint64 jnx_tx_encrypted_bytes = 102;
                     optional uint64 jnx_tx_protected_bytes = 103;
                  }
               }
            }
            repeated scsa_tx_list scsa_tx = 151;
         }
         optional scsa_rx_type scsa_rx = 154;
         message scsa_rx_type {
            message scsa_rx_list {
               optional string sci_rx = 151 [(telemetry_options).is_key = true];
               optional state_type state = 152;
               message state_type {
                  optional string sci_rx = 151;
                  optional counters_type counters = 152;
                  message counters_type {
                     optional uint64 sc_invalid = 63;
                     optional uint64 sc_valid = 64;
                     optional uint64 sa_invalid = 65;
                     optional uint64 sa_valid = 66;
                     optional uint64 jnx_rx_sc_validated_bytes = 98;
                     optional uint64 jnx_rx_sc_decrypted_bytes = 99;
                     optional uint64 jnx_rx_sa_validated_bytes = 100;
                     optional uint64 jnx_rx_sa_decrypted_bytes = 101;
                  }
               }
            }
            repeated scsa_rx_list scsa_rx = 151;
         }
         optional mka_type mka = 152;
         message mka_type {
            optional state_type state = 151;
            message state_type {
               optional counters_type counters = 151;
               message counters_type {
                  optional uint64 in_mkpdu = 56;
                  optional uint64 out_mkpdu = 57;
                  optional uint32 jnx_version_error = 58;
                  optional uint32 jnx_cak_error = 83;
                  optional uint32 jnx_integrity_check_value_mismatch = 84;
                  optional uint32 jnx_duplicate_message_identifier = 85;
                  optional uint32 jnx_duplicate_message_number = 86;
                  optional uint32 jnx_duplicate_address = 87;
                  optional uint32 jnx_invalid_destination = 88;
                  optional uint32 jnx_format_error = 89;
                  optional uint32 jnx_old_message_number = 90;
               }
               optional uint32 jnx_latest_sak_an = 82;
               optional string jnx_key_server = 91;
               optional string jnx_fail_open_mode = 92;
               optional string jnx_latest_sak_ki = 93;
               optional string jnx_cak_type = 94;
               optional string jnx_cak_name = 95;
               optional string jnx_member_id = 96;
               optional string jnx_cipher_suit = 97;
            }
         }
      }
      repeated interface_list interface = 151;
   }
}
