/* 
This proto is generated from below openconfig models
openconfig-mpls - This module provides data definitions for configuration of
Multiprotocol Label Switching (MPLS) and associated protocols for
signaling and traffic engineering
jnx-aug-openconfig-mpls - This module contains JUNOS augments to the OpenConfig MPLS model
*/
syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional mpls_SrTePerLspIngressStats jnpr_mpls_SrTePerLspIngressStats_ext = 105;
}

message mpls_SrTePerLspIngressStats {    // /mpls
   optional signaling_protocols_type signaling_protocols = 151;    // /mpls/signaling-protocols
   message signaling_protocols_type {
      optional segment_routing_type segment_routing = 151;    // /mpls/signaling-protocols/segment-routing
      message segment_routing_type {
         optional sr_te_per_lsp_ingress_policies_type sr_te_per_lsp_ingress_policies = 151;    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies
         message sr_te_per_lsp_ingress_policies_type {
            message sr_te_per_lsp_ingress_policy_list {    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy
               message record_list {    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy/record
                  optional string tunnel_name = 51 [(telemetry_options).is_key = true];    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy/record/tunnel-name
                  optional string source = 52 [(telemetry_options).is_key = true];    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy/record/source
                  optional string origin = 53 [(telemetry_options).is_key = true];    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy/record/origin
                  optional string distinguisher = 54 [(telemetry_options).is_key = true];    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy/record/distinguisher
                  optional string lsp_name = 55 [(telemetry_options).is_key = true];    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy/record/lsp-name
                  optional string counter_name = 56;    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy/record/counter-name
                  optional uint32 instance_identifier = 57;    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy/record/instance-identifier
                  optional uint64 packets = 58 [(telemetry_options).is_counter = true];    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy/record/packets
                  optional uint64 bytes = 59 [(telemetry_options).is_counter = true];    // /mpls/signaling-protocols/segment-routing/sr-te-per-lsp-ingress-policies/sr-te-per-lsp-ingress-policy/record/bytes
               }
               repeated record_list record = 151;
            }
            repeated sr_te_per_lsp_ingress_policy_list sr_te_per_lsp_ingress_policy = 151;
         }
      }
   }
}
