/* 
This proto is generated from below openconfig models
openconfig-srte-policy - This module defines a collection of segment routing traffic
engineering policy operational states
openconfig-segment-routing - Configuration and operational state parameters relating to the
segment routing
*/
syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional network_instances_SRTE jnpr_network_instances_SRTE_ext = 169;
}

message network_instances_SRTE {    // /network-instances
   message network_instance_list {    // /network-instances/network-instance
      optional string name = 51 [(telemetry_options).is_key = true];    // /network-instances/network-instance/name
      optional segment_routing_type segment_routing = 101;    // /network-instances/network-instance/segment-routing
      message segment_routing_type {
         optional te_policies_type te_policies = 151;    // /network-instances/network-instance/segment-routing/te-policies
         message te_policies_type {
            message te_policy_list {    // /network-instances/network-instance/segment-routing/te-policies/te-policy
               optional uint32 color = 51 [(telemetry_options).is_key = true];    // /network-instances/network-instance/segment-routing/te-policies/te-policy/color
               optional string endpoint = 52 [(telemetry_options).is_key = true];    // /network-instances/network-instance/segment-routing/te-policies/te-policy/endpoint
               optional state_type state = 151;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/state
               message state_type {
                  optional uint32 color = 51;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/state/color
                  optional string endpoint = 52;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/state/endpoint
                  optional string bsid = 53;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid
                  optional bool active = 54;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/state/active
                  optional uint64 active_since = 55;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since
                  optional uint64 active_transitions = 56;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions
               }
               optional candidate_paths_type candidate_paths = 152;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths
               message candidate_paths_type {
                  message candidate_path_list {    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path
                     optional string protocol_origin = 51 [(telemetry_options).is_key = true];    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/protocol-origin
                     optional uint32 originator_asn = 52 [(telemetry_options).is_key = true];    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/originator-asn
                     optional string originator_addr = 53 [(telemetry_options).is_key = true];    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/originator-addr
                     optional uint32 discriminator = 54 [(telemetry_options).is_key = true];    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/discriminator
                     optional state_type state = 151;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state
                     message state_type {
                        optional string name = 58;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name
                        optional string protocol_origin = 51;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/protocol-origin
                        optional uint32 originator_asn = 52;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-asn
                        optional string originator_addr = 53;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-addr
                        optional uint32 discriminator = 54;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/discriminator
                        optional uint32 preference = 55;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference
                        optional string enlp = 56;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp
                        optional bool valid = 57;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid
                        optional bool active = 59;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active
                        optional uint64 active_since = 60;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since
                        optional uint64 active_transitions = 61;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions
                     }
                     optional segment_lists_type segment_lists = 152;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists
                     message segment_lists_type {
                        message segment_list_list {    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list
                           optional uint32 id = 51 [(telemetry_options).is_key = true];    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/id
                           optional state_type state = 151;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state
                           message state_type {
                              optional uint32 id = 51;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/id
                              optional bool valid = 52;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid
                              optional string invalid_reason = 53;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason
                              optional uint32 weight = 54;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight
                           }
                           optional sids_type sids = 152;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids
                           message sids_type {
                              message sid_list {    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid
                                 optional uint64 index = 51 [(telemetry_options).is_key = true];    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/index
                                 optional state_type state = 151;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state
                                 message state_type {
                                    optional uint64 index = 51;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/index
                                    optional string value = 52;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value
                                    optional uint32 mpls_ttl = 53;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl
                                    optional uint32 mpls_tc = 54;    // /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc
                                 }
                              }
                              repeated sid_list sid = 151;
                           }
                        }
                        repeated segment_list_list segment_list = 151;
                     }
                  }
                  repeated candidate_path_list candidate_path = 151;
               }
            }
            repeated te_policy_list te_policy = 151;
         }
      }
      optional mpls_type mpls = 151;    // /network-instances/network-instance/mpls
      message mpls_type {
         optional signaling_protocols_type signaling_protocols = 151;    // /network-instances/network-instance/mpls/signaling-protocols
         message signaling_protocols_type {
            optional segment_routing_type segment_routing = 151;    // /network-instances/network-instance/mpls/signaling-protocols/segment-routing
            message segment_routing_type {
               optional interfaces_type interfaces = 151;    // /network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces
               message interfaces_type {
                  message interface_list {    // /network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface
                     optional string interface_id = 51 [(telemetry_options).is_key = true];    // /network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-id
                     optional state_type state = 151;    // /network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state
                     message state_type {
                        optional string interface_id = 51;    // /network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id
                     }
                     optional interface_ref_type interface_ref = 152;    // /network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref
                     message interface_ref_type {
                        optional state_type state = 151;    // /network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state
                        message state_type {
                           optional string interface = 51;    // /network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface
                           optional uint32 subinterface = 52;    // /network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface
                        }
                     }
                  }
                  repeated interface_list interface = 151;
               }
            }
         }
      }
   }
   repeated network_instance_list network_instance = 151;
}
