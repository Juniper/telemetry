/* 
This proto is generated from below openconfig models
openconfig-platform - This module defines a data model for representing a system
component inventory, which can include hardware or software
elements arranged in an arbitrary structure
openconfig-platform-ext - This module defines optional extensions to the OpenConfig
platform model
openconfig-platform-cpu - This module defines data related to FAN components in the
OpenConfig platform model
*/
syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional components_fpc jnpr_components_fpc_ext = 140;
}

message components_fpc {    // /components
   message component_list {    // /components/component
      optional string name = 51 [(telemetry_options).is_key = true];    // /components/component/name
      optional state_type state = 151;    // /components/component/state
      message state_type {
         optional string name = 51;    // /components/component/state/name
         optional string type = 52;    // /components/component/state/type
         optional string id = 53;    // /components/component/state/id
         optional string location = 59;    // /components/component/state/location
         optional string description = 54;    // /components/component/state/description
         optional string mfg_name = 60;    // /components/component/state/mfg-name
         optional string mfg_date = 61;    // /components/component/state/mfg-date
         optional string hardware_version = 57;    // /components/component/state/hardware-version
         optional string firmware_version = 62;    // /components/component/state/firmware-version
         optional string software_version = 63;    // /components/component/state/software-version
         optional string serial_no = 55;    // /components/component/state/serial-no
         optional string part_no = 56;    // /components/component/state/part-no
         optional bool removable = 64;    // /components/component/state/removable
         optional string oper_status = 58;    // /components/component/state/oper-status
         optional bool empty = 65;    // /components/component/state/empty
         optional string parent = 66;    // /components/component/state/parent
         optional temperature_type temperature = 151;    // /components/component/state/temperature
         message temperature_type {
            optional double instant = 51;    // /components/component/state/temperature/instant
            optional double avg = 56;    // /components/component/state/temperature/avg
            optional double min = 52;    // /components/component/state/temperature/min
            optional double max = 53;    // /components/component/state/temperature/max
            optional uint64 interval = 57;    // /components/component/state/temperature/interval
            optional uint64 min_time = 54;    // /components/component/state/temperature/min-time
            optional uint64 max_time = 55;    // /components/component/state/temperature/max-time
            optional bool alarm_status = 58;    // /components/component/state/temperature/alarm-status
            optional uint32 alarm_threshold = 59;    // /components/component/state/temperature/alarm-threshold
            optional string alarm_severity = 60;    // /components/component/state/temperature/alarm-severity
         }
         optional memory_type memory = 152;    // /components/component/state/memory
         message memory_type {
            optional uint64 available = 51;    // /components/component/state/memory/available
            optional uint64 utilized = 52;    // /components/component/state/memory/utilized
         }
         optional uint32 allocated_power = 67;    // /components/component/state/allocated-power
         optional uint32 used_power = 68;    // /components/component/state/used-power
         optional uint32 entity_id = 73;    // /components/component/state/entity-id
         optional bool equipment_failure = 74;    // /components/component/state/equipment-failure
         optional bool equipment_mismatch = 75;    // /components/component/state/equipment-mismatch
      }
      optional properties_type properties = 152;    // /components/component/properties
      message properties_type {
         message property_list {    // /components/component/properties/property
            optional string name = 51 [(telemetry_options).is_key = true];    // /components/component/properties/property/name
            optional state_type state = 151;    // /components/component/properties/property/state
            message state_type {
               optional string value = 51;    // /components/component/properties/property/state/value
               optional bool configurable = 52;    // /components/component/properties/property/state/configurable
            }
         }
         repeated property_list property = 151;
      }
      optional subcomponents_type subcomponents = 153;    // /components/component/subcomponents
      message subcomponents_type {
         message subcomponent_list {    // /components/component/subcomponents/subcomponent
            optional string name = 51 [(telemetry_options).is_key = true];    // /components/component/subcomponents/subcomponent/name
            optional state_type state = 151;    // /components/component/subcomponents/subcomponent/state
            message state_type {
               optional string name = 51;    // /components/component/subcomponents/subcomponent/state/name
            }
         }
         repeated subcomponent_list subcomponent = 151;
      }
      optional cpu_type cpu = 154;    // /components/component/cpu
      message cpu_type {
         optional utilization_type utilization = 151;    // /components/component/cpu/utilization
         message utilization_type {
            optional state_type state = 151;    // /components/component/cpu/utilization/state
            message state_type {
               optional uint32 instant = 51;    // /components/component/cpu/utilization/state/instant
               optional uint32 avg = 52;    // /components/component/cpu/utilization/state/avg
               optional uint32 min = 54;    // /components/component/cpu/utilization/state/min
               optional uint32 max = 55;    // /components/component/cpu/utilization/state/max
               optional uint64 interval = 53;    // /components/component/cpu/utilization/state/interval
               optional uint64 min_time = 56;    // /components/component/cpu/utilization/state/min-time
               optional uint64 max_time = 57;    // /components/component/cpu/utilization/state/max-time
            }
         }
      }
   }
   repeated component_list component = 151;
}
