/* 
This proto is generated from below openconfig models
openconfig-sampling-sflow - This module defines configuration and operational state data
related to data plane traffic sampling based on sFlow
*/
syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional sampling_253 jnpr_sampling_253_ext = 253;
}

message sampling_253 {    // /sampling
   optional sflow_type sflow = 151;    // /sampling/sflow
   message sflow_type {
      optional state_type state = 151;    // /sampling/sflow/state
      message state_type {
         optional bool enabled = 51;    // /sampling/sflow/state/enabled
         optional string agent_id_ipv4 = 52;    // /sampling/sflow/state/agent-id-ipv4
         optional string agent_id_ipv6 = 53;    // /sampling/sflow/state/agent-id-ipv6
         optional uint32 dscp = 54;    // /sampling/sflow/state/dscp
         optional uint32 sample_size = 55;    // /sampling/sflow/state/sample-size
         optional uint32 polling_interval = 56;    // /sampling/sflow/state/polling-interval
         optional uint32 ingress_sampling_rate = 57;    // /sampling/sflow/state/ingress-sampling-rate
         optional uint32 egress_sampling_rate = 58;    // /sampling/sflow/state/egress-sampling-rate
      }
      optional collectors_type collectors = 152;    // /sampling/sflow/collectors
      message collectors_type {
         message collector_list {    // /sampling/sflow/collectors/collector
            optional string address = 51 [(telemetry_options).is_key = true];    // /sampling/sflow/collectors/collector/address
            optional uint32 port = 52 [(telemetry_options).is_key = true];    // /sampling/sflow/collectors/collector/port
            optional state_type state = 151;    // /sampling/sflow/collectors/collector/state
            message state_type {
               optional string address = 51;    // /sampling/sflow/collectors/collector/state/address
               optional uint32 port = 52;    // /sampling/sflow/collectors/collector/state/port
               optional string source_address = 53;    // /sampling/sflow/collectors/collector/state/source-address
               optional string network_instance = 54;    // /sampling/sflow/collectors/collector/state/network-instance
               optional uint64 packets_sent = 55;    // /sampling/sflow/collectors/collector/state/packets-sent
            }
         }
         repeated collector_list collector = 151;
      }
      optional interfaces_type interfaces = 153;    // /sampling/sflow/interfaces
      message interfaces_type {
         message interface_list {    // /sampling/sflow/interfaces/interface
            optional string name = 51 [(telemetry_options).is_key = true];    // /sampling/sflow/interfaces/interface/name
            optional state_type state = 151;    // /sampling/sflow/interfaces/interface/state
            message state_type {
               optional string name = 51;    // /sampling/sflow/interfaces/interface/state/name
               optional bool enabled = 52;    // /sampling/sflow/interfaces/interface/state/enabled
               optional uint32 polling_interval = 53;    // /sampling/sflow/interfaces/interface/state/polling-interval
               optional uint32 ingress_sampling_rate = 54;    // /sampling/sflow/interfaces/interface/state/ingress-sampling-rate
               optional uint32 egress_sampling_rate = 55;    // /sampling/sflow/interfaces/interface/state/egress-sampling-rate
               optional uint64 packets_sampled = 56;    // /sampling/sflow/interfaces/interface/state/packets-sampled
            }
         }
         repeated interface_list interface = 151;
      }
   }
}
