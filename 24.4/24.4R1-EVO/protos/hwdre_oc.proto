/* 
This proto is generated from below openconfig models
openconfig-platform - This module defines a data model for representing a system
component inventory, which can include hardware or software
elements arranged in an arbitrary structure
openconfig-platform-fan - This module defines data related to FAN components in the
OpenConfig platform model
openconfig-platform-psu - This module defines a schema for power supply components in
the OpenConfig platform model
openconfig-platform-linecard - This module defines data related to LINECARD components in
the openconfig-platform model
openconfig-platform-fabric - This module defines data related to FABRIC components in
the openconfig-platform model
openconfig-platform-controller-card - This module defines data related to CONTROLLER_CARD components in
the openconfig-platform model
openconfig-platform-ext - This module defines optional extensions to the OpenConfig
platform model
*/
syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional components_re jnpr_components_re_ext = 97;
}

message components_re {    // /components
   message component_list {    // /components/component
      optional string name = 51 [(telemetry_options).is_key = true];    // /components/component/name
      optional state_type state = 151;    // /components/component/state
      message state_type {
         optional string name = 51;    // /components/component/state/name
         optional string type = 52;    // /components/component/state/type
         optional string id = 53;    // /components/component/state/id
         optional string location = 59;    // /components/component/state/location
         optional string description = 54;    // /components/component/state/description
         optional string mfg_name = 60;    // /components/component/state/mfg-name
         optional string mfg_date = 61;    // /components/component/state/mfg-date
         optional string hardware_version = 57;    // /components/component/state/hardware-version
         optional string firmware_version = 62;    // /components/component/state/firmware-version
         optional string software_version = 63;    // /components/component/state/software-version
         optional string serial_no = 55;    // /components/component/state/serial-no
         optional string part_no = 56;    // /components/component/state/part-no
         optional bool removable = 64;    // /components/component/state/removable
         optional string oper_status = 58;    // /components/component/state/oper-status
         optional bool empty = 65;    // /components/component/state/empty
         optional string parent = 66;    // /components/component/state/parent
         optional string redundant_role = 73;    // /components/component/state/redundant-role
         optional last_switchover_reason_type last_switchover_reason = 153;    // /components/component/state/last-switchover-reason
         message last_switchover_reason_type {
            optional string trigger = 51;    // /components/component/state/last-switchover-reason/trigger
            optional string details = 52;    // /components/component/state/last-switchover-reason/details
         }
         optional uint64 last_switchover_time = 74;    // /components/component/state/last-switchover-time
         optional string last_reboot_reason = 75;    // /components/component/state/last-reboot-reason
         optional uint64 last_reboot_time = 76;    // /components/component/state/last-reboot-time
         optional bool switchover_ready = 77;    // /components/component/state/switchover-ready
         optional string base_mac_address = 69;    // /components/component/state/base-mac-address
         optional temperature_type temperature = 151;    // /components/component/state/temperature
         message temperature_type {
            optional double instant = 51;    // /components/component/state/temperature/instant
            optional double avg = 56;    // /components/component/state/temperature/avg
            optional double min = 52;    // /components/component/state/temperature/min
            optional double max = 53;    // /components/component/state/temperature/max
            optional uint64 interval = 57;    // /components/component/state/temperature/interval
            optional uint64 min_time = 54;    // /components/component/state/temperature/min-time
            optional uint64 max_time = 55;    // /components/component/state/temperature/max-time
            optional bool alarm_status = 58;    // /components/component/state/temperature/alarm-status
            optional uint32 alarm_threshold = 59;    // /components/component/state/temperature/alarm-threshold
            optional string alarm_severity = 60;    // /components/component/state/temperature/alarm-severity
         }
         optional memory_type memory = 152;    // /components/component/state/memory
         message memory_type {
            optional uint64 available = 51;    // /components/component/state/memory/available
            optional uint64 utilized = 52;    // /components/component/state/memory/utilized
         }
         optional uint32 allocated_power = 67;    // /components/component/state/allocated-power
         optional uint32 used_power = 68;    // /components/component/state/used-power
         optional uint32 entity_id = 78;    // /components/component/state/entity-id
         optional bool equipment_failure = 79;    // /components/component/state/equipment-failure
         optional bool equipment_mismatch = 80;    // /components/component/state/equipment-mismatch
      }
      optional properties_type properties = 152;    // /components/component/properties
      message properties_type {
         message property_list {    // /components/component/properties/property
            optional string name = 51 [(telemetry_options).is_key = true];    // /components/component/properties/property/name
            optional state_type state = 151;    // /components/component/properties/property/state
            message state_type {
               optional string value = 51;    // /components/component/properties/property/state/value
               optional bool configurable = 52;    // /components/component/properties/property/state/configurable
            }
         }
         repeated property_list property = 151;
      }
      optional subcomponents_type subcomponents = 154;    // /components/component/subcomponents
      message subcomponents_type {
         message subcomponent_list {    // /components/component/subcomponents/subcomponent
            optional string name = 51 [(telemetry_options).is_key = true];    // /components/component/subcomponents/subcomponent/name
            optional state_type state = 151;    // /components/component/subcomponents/subcomponent/state
            message state_type {
               optional string name = 51;    // /components/component/subcomponents/subcomponent/state/name
            }
         }
         repeated subcomponent_list subcomponent = 151;
      }
      optional chassis_type chassis = 169;    // /components/component/chassis
      message chassis_type {
         optional utilization_type utilization = 151;    // /components/component/chassis/utilization
         message utilization_type {
            optional resources_type resources = 151;    // /components/component/chassis/utilization/resources
            message resources_type {
               message resource_list {    // /components/component/chassis/utilization/resources/resource
                  optional string name = 51 [(telemetry_options).is_key = true];    // /components/component/chassis/utilization/resources/resource/name
                  optional state_type state = 151;    // /components/component/chassis/utilization/resources/resource/state
                  message state_type {
                     optional string name = 51;    // /components/component/chassis/utilization/resources/resource/state/name
                     optional uint32 used_threshold_upper = 58;    // /components/component/chassis/utilization/resources/resource/state/used-threshold-upper
                     optional uint32 used_threshold_upper_clear = 59;    // /components/component/chassis/utilization/resources/resource/state/used-threshold-upper-clear
                     optional uint64 used = 52;    // /components/component/chassis/utilization/resources/resource/state/used
                     optional uint64 committed = 53;    // /components/component/chassis/utilization/resources/resource/state/committed
                     optional uint64 free = 54;    // /components/component/chassis/utilization/resources/resource/state/free
                     optional uint64 max_limit = 55;    // /components/component/chassis/utilization/resources/resource/state/max-limit
                     optional uint64 high_watermark = 56;    // /components/component/chassis/utilization/resources/resource/state/high-watermark
                     optional uint64 last_high_watermark = 57;    // /components/component/chassis/utilization/resources/resource/state/last-high-watermark
                     optional bool used_threshold_upper_exceeded = 60;    // /components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded
                  }
               }
               repeated resource_list resource = 151;
            }
         }
      }
      optional power_supply_type power_supply = 155;    // /components/component/power-supply
      message power_supply_type {
         optional state_type state = 151;    // /components/component/power-supply/state
         message state_type {
            optional string capacity = 51;    // /components/component/power-supply/state/capacity
            optional string input_current = 52;    // /components/component/power-supply/state/input-current
            optional string input_voltage = 53;    // /components/component/power-supply/state/input-voltage
            optional string output_current = 54;    // /components/component/power-supply/state/output-current
            optional string output_voltage = 55;    // /components/component/power-supply/state/output-voltage
            optional string output_power = 56;    // /components/component/power-supply/state/output-power
            optional bool enabled = 57;    // /components/component/power-supply/state/enabled
         }
      }
      optional fan_type fan = 153;    // /components/component/fan
      message fan_type {
         optional state_type state = 151;    // /components/component/fan/state
         message state_type {
            optional uint32 speed = 51;    // /components/component/fan/state/speed
         }
      }
      optional fabric_type fabric = 166;    // /components/component/fabric
      message fabric_type {
         optional state_type state = 166;    // /components/component/fabric/state
         message state_type {
            optional string power_admin_state = 58;    // /components/component/fabric/state/power-admin-state
         }
      }
      optional storage_type storage = 167;    // /components/component/storage
      message storage_type {
      }
      optional backplane_type backplane = 165;    // /components/component/backplane
      message backplane_type {
      }
      optional controller_card_type controller_card = 168;    // /components/component/controller-card
      message controller_card_type {
         optional state_type state = 168;    // /components/component/controller-card/state
         message state_type {
            optional string power_admin_state = 58;    // /components/component/controller-card/state/power-admin-state
         }
      }
      optional linecard_type linecard = 161;    // /components/component/linecard
      message linecard_type {
         optional state_type state = 151;    // /components/component/linecard/state
         message state_type {
            optional string power_admin_state = 152;    // /components/component/linecard/state/power-admin-state
            optional string slot_id = 153;    // /components/component/linecard/state/slot-id
         }
         optional utilization_type utilization = 152;    // /components/component/linecard/utilization
         message utilization_type {
            optional resources_type resources = 151;    // /components/component/linecard/utilization/resources
            message resources_type {
               message resource_list {    // /components/component/linecard/utilization/resources/resource
                  optional string name = 51 [(telemetry_options).is_key = true];    // /components/component/linecard/utilization/resources/resource/name
                  optional state_type state = 151;    // /components/component/linecard/utilization/resources/resource/state
                  message state_type {
                     optional string name = 51;    // /components/component/linecard/utilization/resources/resource/state/name
                     optional uint32 used_threshold_upper = 58;    // /components/component/linecard/utilization/resources/resource/state/used-threshold-upper
                     optional uint32 used_threshold_upper_clear = 59;    // /components/component/linecard/utilization/resources/resource/state/used-threshold-upper-clear
                     optional uint64 used = 52;    // /components/component/linecard/utilization/resources/resource/state/used
                     optional uint64 committed = 53;    // /components/component/linecard/utilization/resources/resource/state/committed
                     optional uint64 free = 54;    // /components/component/linecard/utilization/resources/resource/state/free
                     optional uint64 max_limit = 55;    // /components/component/linecard/utilization/resources/resource/state/max-limit
                     optional uint64 high_watermark = 56;    // /components/component/linecard/utilization/resources/resource/state/high-watermark
                     optional uint64 last_high_watermark = 57;    // /components/component/linecard/utilization/resources/resource/state/last-high-watermark
                     optional bool used_threshold_upper_exceeded = 60;    // /components/component/linecard/utilization/resources/resource/state/used-threshold-upper-exceeded
                  }
               }
               repeated resource_list resource = 151;
            }
         }
      }
   }
   repeated component_list component = 151;
}
