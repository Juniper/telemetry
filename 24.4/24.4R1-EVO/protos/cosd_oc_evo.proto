/* 
This proto is generated from below openconfig models
openconfig-qos - This module defines configuration and operational state data
related to network quality-of-service
*/
syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional qos jnpr_qos_ext = 134;
}

message qos {    // /qos
   optional interfaces_type interfaces = 151;    // /qos/interfaces
   message interfaces_type {
      message interface_list {    // /qos/interfaces/interface
         optional string interface_id = 51 [(telemetry_options).is_key = true];    // /qos/interfaces/interface/interface-id
         optional state_type state = 151;    // /qos/interfaces/interface/state
         message state_type {
            optional string interface_id = 51;    // /qos/interfaces/interface/state/interface-id
         }
         optional interface_ref_type interface_ref = 152;    // /qos/interfaces/interface/interface-ref
         message interface_ref_type {
            optional state_type state = 151;    // /qos/interfaces/interface/interface-ref/state
            message state_type {
               optional string interface = 51;    // /qos/interfaces/interface/interface-ref/state/interface
               optional uint32 subinterface = 53;    // /qos/interfaces/interface/interface-ref/state/subinterface
            }
         }
         optional input_type input = 153;    // /qos/interfaces/interface/input
         message input_type {
            optional classifiers_type classifiers = 151;    // /qos/interfaces/interface/input/classifiers
            message classifiers_type {
               message classifier_list {    // /qos/interfaces/interface/input/classifiers/classifier
                  optional string type = 51 [(telemetry_options).is_key = true];    // /qos/interfaces/interface/input/classifiers/classifier/type
                  optional state_type state = 151;    // /qos/interfaces/interface/input/classifiers/classifier/state
                  message state_type {
                     optional string name = 51;    // /qos/interfaces/interface/input/classifiers/classifier/state/name
                     optional string type = 52;    // /qos/interfaces/interface/input/classifiers/classifier/state/type
                  }
               }
               repeated classifier_list classifier = 151;
            }
         }
         optional output_type output = 154;    // /qos/interfaces/interface/output
         message output_type {
            optional classifiers_type classifiers = 153;    // /qos/interfaces/interface/output/classifiers
            message classifiers_type {
               message classifier_list {    // /qos/interfaces/interface/output/classifiers/classifier
                  optional string type = 51 [(telemetry_options).is_key = true];    // /qos/interfaces/interface/output/classifiers/classifier/type
                  optional state_type state = 151;    // /qos/interfaces/interface/output/classifiers/classifier/state
                  message state_type {
                     optional string name = 51;    // /qos/interfaces/interface/output/classifiers/classifier/state/name
                     optional string type = 52;    // /qos/interfaces/interface/output/classifiers/classifier/state/type
                  }
               }
               repeated classifier_list classifier = 151;
            }
            optional queues_type queues = 152;    // /qos/interfaces/interface/output/queues
            message queues_type {
               message queue_list {    // /qos/interfaces/interface/output/queues/queue
                  optional string name = 151 [(telemetry_options).is_key = true];    // /qos/interfaces/interface/output/queues/queue/name
                  optional state_type state = 152;    // /qos/interfaces/interface/output/queues/queue/state
                  message state_type {
                     optional string name = 51;    // /qos/interfaces/interface/output/queues/queue/state/name
                     optional string queue_management_profile = 52;    // /qos/interfaces/interface/output/queues/queue/state/queue-management-profile
                  }
               }
               repeated queue_list queue = 51;
            }
            optional scheduler_policy_type scheduler_policy = 151;    // /qos/interfaces/interface/output/scheduler-policy
            message scheduler_policy_type {
               optional state_type state = 151;    // /qos/interfaces/interface/output/scheduler-policy/state
               message state_type {
                  optional string name = 51;    // /qos/interfaces/interface/output/scheduler-policy/state/name
               }
            }
         }
      }
      repeated interface_list interface = 151;
   }
   optional forwarding_groups_type forwarding_groups = 152;    // /qos/forwarding-groups
   message forwarding_groups_type {
      message forwarding_group_list {    // /qos/forwarding-groups/forwarding-group
         optional string name = 51 [(telemetry_options).is_key = true];    // /qos/forwarding-groups/forwarding-group/name
         optional state_type state = 151;    // /qos/forwarding-groups/forwarding-group/state
         message state_type {
            optional string name = 51;    // /qos/forwarding-groups/forwarding-group/state/name
            optional uint32 fabric_priority = 53;    // /qos/forwarding-groups/forwarding-group/state/fabric-priority
            optional string output_queue = 52;    // /qos/forwarding-groups/forwarding-group/state/output-queue
         }
      }
      repeated forwarding_group_list forwarding_group = 151;
   }
   optional queues_type queues = 156;    // /qos/queues
   message queues_type {
      message queue_list {    // /qos/queues/queue
         optional string name = 51 [(telemetry_options).is_key = true];    // /qos/queues/queue/name
         optional state_type state = 151;    // /qos/queues/queue/state
         message state_type {
            optional string name = 51;    // /qos/queues/queue/state/name
            optional uint32 queue_id = 52;    // /qos/queues/queue/state/queue-id
         }
      }
      repeated queue_list queue = 151;
   }
   optional classifiers_type classifiers = 153;    // /qos/classifiers
   message classifiers_type {
      message classifier_list {    // /qos/classifiers/classifier
         optional string name = 51 [(telemetry_options).is_key = true];    // /qos/classifiers/classifier/name
         optional state_type state = 152;    // /qos/classifiers/classifier/state
         message state_type {
            optional string name = 51;    // /qos/classifiers/classifier/state/name
            optional string type = 52;    // /qos/classifiers/classifier/state/type
         }
         optional terms_type terms = 151;    // /qos/classifiers/classifier/terms
         message terms_type {
            message term_list {    // /qos/classifiers/classifier/terms/term
               optional string id = 51 [(telemetry_options).is_key = true];    // /qos/classifiers/classifier/terms/term/id
               optional state_type state = 151;    // /qos/classifiers/classifier/terms/term/state
               message state_type {
                  optional string id = 51;    // /qos/classifiers/classifier/terms/term/state/id
               }
               optional conditions_type conditions = 152;    // /qos/classifiers/classifier/terms/term/conditions
               message conditions_type {
                  optional ipv4_type ipv4 = 151;    // /qos/classifiers/classifier/terms/term/conditions/ipv4
                  message ipv4_type {
                     optional state_type state = 151;    // /qos/classifiers/classifier/terms/term/conditions/ipv4/state
                     message state_type {
                        optional uint32 dscp = 51;    // /qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp
                        repeated uint32 dscp_set = 52;    // /qos/classifiers/classifier/terms/term/conditions/ipv4/state/dscp-set
                     }
                  }
                  optional ipv6_type ipv6 = 152;    // /qos/classifiers/classifier/terms/term/conditions/ipv6
                  message ipv6_type {
                     optional state_type state = 151;    // /qos/classifiers/classifier/terms/term/conditions/ipv6/state
                     message state_type {
                        optional uint32 dscp = 51;    // /qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp
                        repeated uint32 dscp_set = 52;    // /qos/classifiers/classifier/terms/term/conditions/ipv6/state/dscp-set
                     }
                  }
                  optional mpls_type mpls = 153;    // /qos/classifiers/classifier/terms/term/conditions/mpls
                  message mpls_type {
                     optional state_type state = 151;    // /qos/classifiers/classifier/terms/term/conditions/mpls/state
                     message state_type {
                        optional uint32 traffic_class = 51;    // /qos/classifiers/classifier/terms/term/conditions/mpls/state/traffic-class
                     }
                  }
               }
               optional actions_type actions = 153;    // /qos/classifiers/classifier/terms/term/actions
               message actions_type {
                  optional state_type state = 151;    // /qos/classifiers/classifier/terms/term/actions/state
                  message state_type {
                     optional string target_group = 151;    // /qos/classifiers/classifier/terms/term/actions/state/target-group
                  }
                  optional remark_type remark = 152;    // /qos/classifiers/classifier/terms/term/actions/remark
                  message remark_type {
                     optional state_type state = 51;    // /qos/classifiers/classifier/terms/term/actions/remark/state
                     message state_type {
                        optional uint32 set_dscp = 151;    // /qos/classifiers/classifier/terms/term/actions/remark/state/set-dscp
                        optional uint32 set_dot1p = 152;    // /qos/classifiers/classifier/terms/term/actions/remark/state/set-dot1p
                        optional uint32 set_mpls_tc = 153;    // /qos/classifiers/classifier/terms/term/actions/remark/state/set-mpls-tc
                     }
                  }
               }
            }
            repeated term_list term = 151;
         }
      }
      repeated classifier_list classifier = 151;
   }
   optional scheduler_policies_type scheduler_policies = 154;    // /qos/scheduler-policies
   message scheduler_policies_type {
      message scheduler_policy_list {    // /qos/scheduler-policies/scheduler-policy
         optional string name = 51 [(telemetry_options).is_key = true];    // /qos/scheduler-policies/scheduler-policy/name
         optional state_type state = 151;    // /qos/scheduler-policies/scheduler-policy/state
         message state_type {
            optional string name = 51;    // /qos/scheduler-policies/scheduler-policy/state/name
         }
         optional schedulers_type schedulers = 152;    // /qos/scheduler-policies/scheduler-policy/schedulers
         message schedulers_type {
            message scheduler_list {    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler
               optional uint32 sequence = 51 [(telemetry_options).is_key = true];    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/sequence
               optional state_type state = 151;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state
               message state_type {
                  optional uint32 sequence = 51;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/sequence
                  optional string priority = 52;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state/priority
               }
               optional inputs_type inputs = 155;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs
               message inputs_type {
                  message input_list {    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input
                     optional string id = 151 [(telemetry_options).is_key = true];    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/id
                     optional state_type state = 152;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state
                     message state_type {
                        optional string id = 51;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/id
                        optional string input_type = 52;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/input-type
                        optional string queue = 53;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/queue
                        optional uint64 weight = 54;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state/weight
                     }
                  }
                  repeated input_list input = 51;
               }
               optional output_type output = 152;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output
               message output_type {
                  optional state_type state = 151;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state
                  message state_type {
                     optional string output_fwd_group = 51;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state/output-fwd-group
                  }
               }
               optional one_rate_two_color_type one_rate_two_color = 154;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color
               message one_rate_two_color_type {
                  optional state_type state = 151;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state
                  message state_type {
                     optional uint64 cir = 51;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir
                     optional uint32 cir_pct_remaining = 52;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/cir-pct-remaining
                     optional string queuing_behavior = 54;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/queuing-behavior
                     optional uint32 max_queue_depth_percent = 53;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state/max-queue-depth-percent
                  }
               }
               optional two_rate_three_color_type two_rate_three_color = 153;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color
               message two_rate_three_color_type {
                  optional state_type state = 151;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state
                  message state_type {
                     optional uint64 cir = 51;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir
                     optional uint32 cir_pct = 52;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/cir-pct
                     optional uint64 pir = 53;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir
                     optional uint32 pir_pct = 54;    // /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state/pir-pct
                  }
               }
            }
            repeated scheduler_list scheduler = 151;
         }
      }
      repeated scheduler_policy_list scheduler_policy = 151;
   }
   optional queue_management_profiles_type queue_management_profiles = 155;    // /qos/queue-management-profiles
   message queue_management_profiles_type {
      message queue_management_profile_list {    // /qos/queue-management-profiles/queue-management-profile
         optional string name = 51 [(telemetry_options).is_key = true];    // /qos/queue-management-profiles/queue-management-profile/name
         optional state_type state = 52;    // /qos/queue-management-profiles/queue-management-profile/state
         message state_type {
            optional string name = 151;    // /qos/queue-management-profiles/queue-management-profile/state/name
         }
         optional wred_type wred = 53;    // /qos/queue-management-profiles/queue-management-profile/wred
         message wred_type {
            optional uniform_type uniform = 151;    // /qos/queue-management-profiles/queue-management-profile/wred/uniform
            message uniform_type {
               optional state_type state = 51;    // /qos/queue-management-profiles/queue-management-profile/wred/uniform/state
               message state_type {
                  optional uint64 min_threshold = 155;    // /qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold
                  optional uint64 max_threshold = 156;    // /qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold
                  optional uint64 min_threshold_percent = 151;    // /qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold-percent
                  optional uint64 max_threshold_percent = 152;    // /qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold-percent
                  optional bool enable_ecn = 153;    // /qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn
                  optional bool drop = 157;    // /qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop
                  optional uint32 weight = 158;    // /qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight
                  optional uint32 max_drop_probability_percent = 154;    // /qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent
               }
            }
         }
      }
      repeated queue_management_profile_list queue_management_profile = 151;
   }
}
