syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional state_236 jnpr_state_236_ext = 236;
}

message state_236 {
   optional protocols_type protocols = 152;
   message protocols_type {
      optional sflow_type sflow = 153;
      message sflow_type {
         optional agent_id_type agent_id = 151;
         message agent_id_type {
            optional string inet = 51;
            optional string inet6 = 52;
         }
         optional source_ip_type source_ip = 152;
         message source_ip_type {
            optional string inet = 51;
            optional string inet6 = 52;
         }
         optional uint32 polling_interval = 51;
         optional ingress_type ingress = 153;
         message ingress_type {
            optional uint32 sample_rate = 51;
            optional string status = 52;
         }
         optional egress_type egress = 154;
         message egress_type {
            optional uint32 sample_rate = 51;
            optional string status = 52;
         }
         optional adaptive_sample_rate_type adaptive_sample_rate = 155;
         message adaptive_sample_rate_type {
            optional uint32 sample_rate = 51;
            optional bool fallback = 52;
            optional uint32 sample_limit_threshold = 53;
         }
         optional collectors_type collectors = 156;
         message collectors_type {
            message collector_list {
               optional string address = 51 [(telemetry_options).is_key = true];
               optional uint32 udp_port = 52;
               optional uint32 dscp = 53;
               optional string forwarding_class = 54;
               optional counters_type counters = 151;
               message counters_type {
                  optional uint64 sent_packets = 51;
                  optional uint64 sent_counter_samples = 52;
                  optional uint64 sent_flow_samples = 53;
                  optional uint64 sent_datagrams = 54;
               }
            }
            repeated collector_list collector = 151;
         }
         optional interfaces_type interfaces = 157;
         message interfaces_type {
            message interface_list {
               optional string name = 51 [(telemetry_options).is_key = true];
               optional uint32 polling_interval = 52;
               optional ingress_type ingress = 151;
               message ingress_type {
                  optional uint32 sample_rate = 51;
                  optional string status = 52;
               }
               optional egress_type egress = 152;
               message egress_type {
                  optional uint32 sample_rate = 51;
                  optional string status = 52;
               }
               optional adapted_sample_rate_type adapted_sample_rate = 153;
               message adapted_sample_rate_type {
                  optional uint32 ingress = 51;
                  optional uint32 egress = 52;
               }
               optional counters_type counters = 154;
               message counters_type {
                  optional uint64 sampled_packets = 51;
               }
            }
            repeated interface_list interface = 151;
         }
      }
   }
}
