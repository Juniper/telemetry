syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional probes_telemetry_rmopd_231 jnpr_probes_telemetry_rmopd_231_ext = 231;
}

message probes_telemetry_rmopd_231 {
   message probe_list {
      optional string name = 61 [(telemetry_options).is_key = true];
      optional state_type state = 153;
      message state_type {
         optional string name = 93;
         optional bool enabled = 94;
      }
      optional tests_type tests = 152;
      message tests_type {
         message test_list {
            optional string name = 62 [(telemetry_options).is_key = true];
            optional state_type state = 152;
            message state_type {
               optional string name = 93;
               optional bool enabled = 94;
               optional string test_type = 62;
               optional uint64 count = 63;
               optional uint64 interval = 64;
               optional string source = 65;
               optional uint64 history_size = 66;
               optional uint32 source_port = 67;
               optional uint32 dscp = 68;
            }
            optional target_type target = 153;
            message target_type {
               optional state_type state = 151;
               message state_type {
                  optional string address = 69;
                  optional uint32 port = 71;
                  optional string url = 72;
               }
            }
            optional results_type results = 154;
            message results_type {
               optional state_type state = 151;
               message state_type {
                  optional uint64 timestamp = 69;
                  optional uint64 start_timestamp = 70;
                  optional uint64 last_test_timestamp = 71;
                  optional uint64 test_duration = 72;
                  optional bool failed = 73;
                  optional uint64 probes_sent = 74;
                  optional uint64 probes_received = 75;
                  optional uint32 loss_percentage = 76;
                  optional uint64 jitter = 77;
                  optional uint64 min_delay = 78;
                  optional uint64 max_delay = 79;
                  optional uint64 avg_delay = 80;
                  optional uint64 stddev_delay = 81;
               }
               optional history_type history = 152;
               message history_type {
                  optional items_type items = 151;
                  message items_type {
                     message item_list {
                        optional uint64 id = 65 [(telemetry_options).is_key = true];
                        optional state_type state = 153;
                        message state_type {
                           optional uint64 id = 95;
                           optional uint64 timestamp = 82;
                           optional uint64 start_timestamp = 83;
                           optional uint64 end_timestamp = 84;
                           optional uint64 test_duration = 85;
                           optional bool failed = 86;
                           optional uint64 probes_sent = 87;
                           optional uint64 probes_received = 88;
                           optional uint32 loss_percentage = 89;
                           optional uint64 jitter = 90;
                           optional uint64 min_delay = 91;
                           optional uint64 max_delay = 92;
                           optional uint64 avg_delay = 93;
                           optional uint64 stddev_delay = 94;
                        }
                     }
                     repeated item_list item = 63;
                  }
               }
            }
         }
         repeated test_list test = 151;
      }
   }
   repeated probe_list probe = 151;
}
