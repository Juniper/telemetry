syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional interfaces_mib jnpr_interfaces_mib_ext = 55;
}

message interfaces_mib {
   message interface_list {
      optional string name = 51 [(telemetry_options).is_key = true];
      optional state_type state = 151;
      message state_type {
         optional string name = 51;
         optional string type = 52;
         optional uint32 mtu = 53;
         optional string loopback_mode = 56;
         optional string description = 54;
         optional bool enabled = 55;
         optional uint32 ifindex = 61;
         optional string admin_status = 62;
         optional string oper_status = 63;
         optional uint64 last_change = 64;
         optional bool logical = 65;
         optional string hardware_port = 66;
         optional string transceiver = 67;
         repeated uint32 physical_channel = 68;
         optional counters_type counters = 151;
         message counters_type {
            optional uint64 carrier_transitions = 51;
         }
      }
      optional subinterfaces_type subinterfaces = 152;
      message subinterfaces_type {
         message subinterface_list {
            optional uint32 index = 51 [(telemetry_options).is_key = true];
            optional string name = 52;
            optional uint32 snmp_index = 55;
            optional uint32 logical = 65;
            optional state_type state = 151;
            message state_type {
               optional uint32 index = 51;
               optional string description = 53;
               optional bool enabled = 54;
               optional string name = 52;
               optional uint32 ifindex = 55;
               optional string admin_status = 56;
               optional string oper_status = 57;
               optional uint64 last_change = 58;
               optional bool logical = 65;
            }
            optional tunnel_type tunnel = 154;
            message tunnel_type {
               optional state_type state = 154;
               message state_type {
                  optional string src = 51;
                  optional string dst = 52;
                  optional uint32 ttl = 53;
                  optional uint32 gre_key = 54;
               }
            }
            optional ipv4_type ipv4 = 152;
            message ipv4_type {
               optional addresses_type addresses = 151;
               message addresses_type {
                  message address_list {
                     optional string ip = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional string ip = 51;
                        optional uint32 prefix_length = 52;
                        optional string origin = 53;
                     }
                  }
                  repeated address_list address = 151;
               }
               optional proxy_arp_type proxy_arp = 155;
               message proxy_arp_type {
                  optional state_type state = 154;
                  message state_type {
                     optional string mode = 53;
                  }
               }
               optional neighbors_type neighbors = 152;
               message neighbors_type {
                  message neighbor_list {
                     optional string ip = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional string ip = 51;
                        optional string link_layer_address = 52;
                        optional string origin = 53;
                        optional string host_name = 54;
                        optional uint32 table_id = 55;
                        optional string neighbor_state = 56;
                        optional uint32 expiry = 57;
                        optional bool is_publish = 58;
                        optional string interface_name = 59;
                        optional uint32 logical_router_id = 60;
                     }
                  }
                  repeated neighbor_list neighbor = 151;
               }
               optional unnumbered_type unnumbered = 153;
               message unnumbered_type {
                  optional state_type state = 151;
                  message state_type {
                     optional bool enabled = 51;
                  }
                  optional interface_ref_type interface_ref = 152;
                  message interface_ref_type {
                     optional state_type state = 151;
                     message state_type {
                        optional string interface = 51;
                        optional uint32 subinterface = 52;
                     }
                  }
               }
               optional state_type state = 154;
               message state_type {
                  optional bool enabled = 51;
                  optional uint32 mtu = 52;
                  optional counters_type counters = 151;
                  message counters_type {
                     optional uint64 in_forwarded_pkts = 51;
                     optional uint64 in_forwarded_octets = 52;
                     optional uint64 out_forwarded_pkts = 53;
                     optional uint64 out_forwarded_octets = 54;
                  }
               }
            }
            optional ipv6_type ipv6 = 153;
            message ipv6_type {
               optional addresses_type addresses = 151;
               message addresses_type {
                  message address_list {
                     optional string ip = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional string ip = 51;
                        optional uint32 prefix_length = 52;
                        optional string origin = 53;
                        optional string status = 54;
                     }
                  }
                  repeated address_list address = 151;
               }
               optional neighbors_type neighbors = 152;
               message neighbors_type {
                  message neighbor_list {
                     optional string ip = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional string ip = 51;
                        optional string link_layer_address = 52;
                        optional string origin = 53;
                        optional bool is_router = 54;
                        optional string neighbor_state = 55;
                        optional uint32 table_id = 56;
                        optional bool is_secure = 57;
                        optional uint32 expiry = 59;
                        optional bool is_publish = 58;
                        optional string interface_name = 60;
                        optional uint32 logical_router_id = 61;
                     }
                  }
                  repeated neighbor_list neighbor = 151;
               }
               optional unnumbered_type unnumbered = 153;
               message unnumbered_type {
                  optional state_type state = 151;
                  message state_type {
                     optional bool enabled = 51;
                  }
                  optional interface_ref_type interface_ref = 152;
                  message interface_ref_type {
                     optional state_type state = 151;
                     message state_type {
                        optional string interface = 51;
                        optional uint32 subinterface = 52;
                     }
                  }
               }
               optional state_type state = 154;
               message state_type {
                  optional bool enabled = 51;
                  optional uint32 mtu = 52;
                  optional uint32 dup_addr_detect_transmits = 53;
                  optional counters_type counters = 151;
                  message counters_type {
                     optional uint64 in_forwarded_pkts = 51;
                     optional uint64 in_forwarded_octets = 52;
                     optional uint64 out_forwarded_pkts = 53;
                     optional uint64 out_forwarded_octets = 54;
                  }
               }
            }
         }
         repeated subinterface_list subinterface = 151;
      }
      optional hold_time_type hold_time = 155;
      message hold_time_type {
         optional state_type state = 151;
         message state_type {
            optional uint32 up = 51;
            optional uint32 down = 52;
         }
      }
      optional ethernet_type ethernet = 153;
      message ethernet_type {
         optional state_type state = 151;
         message state_type {
            optional string mac_address = 51;
            optional bool auto_negotiate = 52;
            optional string duplex_mode = 53;
            optional string port_speed = 54;
            optional bool enable_flow_control = 55;
            optional string hw_mac_address = 56;
            optional string negotiated_duplex_mode = 57;
            optional string negotiated_port_speed = 58;
            optional counters_type counters = 151;
            message counters_type {
               optional uint64 in_mac_control_frames = 51;
               optional uint64 in_mac_pause_frames = 52;
               optional uint64 in_oversize_frames = 53;
               optional uint64 in_jabber_frames = 54;
               optional uint64 in_fragment_frames = 55;
               optional uint64 in_8021q_frames = 56;
               optional uint64 in_crc_errors = 57;
               optional uint64 in_block_errors = 58;
               optional uint64 out_mac_control_frames = 60;
               optional uint64 out_mac_pause_frames = 59;
               optional in_distribution_type in_distribution = 151;
               message in_distribution_type {
                  optional uint64 in_frames_64_octets = 51;
                  optional uint64 in_frames_65_127_octets = 52;
                  optional uint64 in_frames_128_255_octets = 53;
                  optional uint64 in_frames_256_511_octets = 54;
                  optional uint64 in_frames_512_1023_octets = 55;
                  optional uint64 in_frames_1024_1518_octets = 56;
               }
            }
         }
      }
   }
   repeated interface_list interface = 151;
}
