syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional qos jnpr_qos_ext = 134;
}

message qos {
   optional interfaces_type interfaces = 151;
   message interfaces_type {
      message interface_list {
         optional string interface_id = 51 [(telemetry_options).is_key = true];
         optional state_type state = 151;
         message state_type {
            optional string interface_id = 51;
         }
         optional interface_ref_type interface_ref = 152;
         message interface_ref_type {
            optional state_type state = 151;
            message state_type {
               optional string interface = 51;
               optional uint32 subinterface = 53;
               optional string jnx_iflsetinterface = 52;
            }
         }
         optional input_type input = 153;
         message input_type {
            optional classifiers_type classifiers = 151;
            message classifiers_type {
               message classifier_list {
                  optional string type = 51 [(telemetry_options).is_key = true];
                  optional state_type state = 151;
                  message state_type {
                     optional string name = 51;
                     optional string type = 52;
                  }
               }
               repeated classifier_list classifier = 151;
            }
         }
         optional output_type output = 154;
         message output_type {
            optional classifiers_type classifiers = 152;
            message classifiers_type {
               message classifier_list {
                  optional string type = 51 [(telemetry_options).is_key = true];
                  optional state_type state = 151;
                  message state_type {
                     optional string name = 51;
                     optional string type = 52;
                  }
               }
               repeated classifier_list classifier = 151;
            }
            optional scheduler_policy_type scheduler_policy = 151;
            message scheduler_policy_type {
               optional state_type state = 151;
               message state_type {
                  optional string name = 51;
               }
            }
         }
      }
      repeated interface_list interface = 151;
   }
   optional forwarding_groups_type forwarding_groups = 152;
   message forwarding_groups_type {
      message forwarding_group_list {
         optional string name = 51 [(telemetry_options).is_key = true];
         optional state_type state = 151;
         message state_type {
            optional string name = 51;
            optional uint32 fabric_priority = 53;
            optional string output_queue = 52;
         }
      }
      repeated forwarding_group_list forwarding_group = 151;
   }
   optional classifiers_type classifiers = 153;
   message classifiers_type {
      message classifier_list {
         optional string name = 51 [(telemetry_options).is_key = true];
         optional state_type state = 152;
         message state_type {
            optional string name = 51;
            optional string type = 52;
         }
         optional terms_type terms = 151;
         message terms_type {
            message term_list {
               optional string id = 51 [(telemetry_options).is_key = true];
               optional state_type state = 151;
               message state_type {
                  optional string id = 51;
               }
               optional conditions_type conditions = 152;
               message conditions_type {
                  optional ipv4_type ipv4 = 151;
                  message ipv4_type {
                     optional state_type state = 151;
                     message state_type {
                        optional uint32 dscp = 51;
                     }
                  }
                  optional ipv6_type ipv6 = 152;
                  message ipv6_type {
                     optional state_type state = 151;
                     message state_type {
                        optional uint32 dscp = 51;
                     }
                  }
                  optional mpls_type mpls = 153;
                  message mpls_type {
                     optional state_type state = 151;
                     message state_type {
                        optional uint32 traffic_class = 51;
                     }
                  }
               }
               optional actions_type actions = 153;
               message actions_type {
                  optional state_type state = 151;
                  message state_type {
                     optional string target_group = 151;
                  }
                  optional remark_type remark = 152;
                  message remark_type {
                     optional state_type state = 151;
                     message state_type {
                        optional uint32 set_dscp = 51;
                        optional uint32 set_dot1p = 52;
                        optional uint32 set_mpls_tc = 53;
                     }
                  }
               }
            }
            repeated term_list term = 151;
         }
      }
      repeated classifier_list classifier = 151;
   }
   optional scheduler_policies_type scheduler_policies = 154;
   message scheduler_policies_type {
      message scheduler_policy_list {
         optional string name = 51 [(telemetry_options).is_key = true];
         optional state_type state = 151;
         message state_type {
            optional string name = 51;
         }
         optional schedulers_type schedulers = 152;
         message schedulers_type {
            message scheduler_list {
               optional uint32 sequence = 51 [(telemetry_options).is_key = true];
               optional state_type state = 151;
               message state_type {
                  optional uint32 sequence = 51;
                  optional string priority = 52;
               }
               optional output_type output = 152;
               message output_type {
                  optional state_type state = 151;
                  message state_type {
                     optional string output_fwd_group = 51;
                  }
               }
               optional two_rate_three_color_type two_rate_three_color = 153;
               message two_rate_three_color_type {
                  optional state_type state = 151;
                  message state_type {
                     optional uint64 cir = 51;
                     optional uint32 cir_pct = 52;
                     optional uint64 pir = 53;
                     optional uint32 pir_pct = 54;
                  }
               }
            }
            repeated scheduler_list scheduler = 151;
         }
      }
      repeated scheduler_policy_list scheduler_policy = 151;
   }
}
