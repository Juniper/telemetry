syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional interfaces_mib_evolved jnpr_interfaces_mib_evolved_ext = 162;
}

message interfaces_mib_evolved {
   message interface_list {
      optional string name = 51 [(telemetry_options).is_key = true];
      optional state_type state = 151;
      message state_type {
         optional counters_type counters = 151;
         message counters_type {
            optional uint64 carrier_transitions = 92;
         }
         optional string name = 51;
         optional string type = 52;
         optional uint32 mtu = 53;
         optional string loopback_mode = 56;
         optional string description = 54;
         optional bool enabled = 55;
         optional uint32 id = 57;
         optional uint32 ifindex = 61;
         optional string admin_status = 62;
         optional string oper_status = 63;
         optional uint64 last_change = 64;
         optional bool logical = 65;
         optional bool management = 67;
         optional bool cpu = 68;
         optional bool forwarding_viable = 66;
         optional string tpid = 69;
         optional uint32 high_speed = 92;
      }
      optional aggregation_type aggregation = 153;
      message aggregation_type {
         optional state_type state = 151;
         message state_type {
            optional string lag_type = 51;
            optional uint32 min_links = 52;
            optional uint32 lag_speed = 53;
            repeated string member = 54;
         }
      }
      optional ethernet_type ethernet = 154;
      message ethernet_type {
         optional state_type state = 151;
         message state_type {
            optional string aggregate_id = 51;
            optional string hw_mac_address = 86;
            optional string negotiated_duplex_mode = 87;
            optional string negotiated_port_speed = 88;
            optional string mac_address = 81;
            optional bool auto_negotiate = 82;
            optional string duplex_mode = 83;
            optional string port_speed = 84;
            optional bool enable_flow_control = 85;
         }
      }
      optional hold_time_type hold_time = 155;
      message hold_time_type {
         optional state_type state = 151;
         message state_type {
            optional uint32 up = 51;
            optional uint32 down = 52;
         }
      }
      optional subinterfaces_type subinterfaces = 152;
      message subinterfaces_type {
         message subinterface_list {
            optional uint32 index = 51 [(telemetry_options).is_key = true];
            optional state_type state = 151;
            message state_type {
               optional uint32 index = 51;
               optional string description = 53;
               optional bool enabled = 54;
               optional string name = 52;
               optional uint32 ifindex = 55;
               optional string admin_status = 56;
               optional string oper_status = 57;
               optional uint64 last_change = 58;
               optional bool logical = 59;
               optional bool management = 61;
               optional bool cpu = 60;
            }
            optional ipv4_type ipv4 = 152;
            message ipv4_type {
               optional addresses_type addresses = 153;
               message addresses_type {
                  message address_list {
                     optional string ip = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional string ip = 51;
                        optional uint32 prefix_length = 52;
                        optional string type = 62;
                        optional string origin = 53;
                     }
                  }
                  repeated address_list address = 151;
               }
               optional proxy_arp_type proxy_arp = 155;
               message proxy_arp_type {
                  optional state_type state = 151;
                  message state_type {
                     optional string mode = 61;
                  }
               }
               optional neighbors_type neighbors = 154;
               message neighbors_type {
                  message neighbor_list {
                     optional string ip = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional string ip = 51;
                        optional string link_layer_address = 52;
                        optional string origin = 53;
                        optional string host_name = 54;
                        optional uint32 table_id = 55;
                        optional string neighbor_state = 56;
                        optional uint32 expiry = 57;
                        optional bool is_publish = 58;
                        optional string interface_name = 59;
                     }
                  }
                  repeated neighbor_list neighbor = 152;
               }
               optional unnumbered_type unnumbered = 152;
               message unnumbered_type {
                  optional state_type state = 151;
                  message state_type {
                     optional bool enabled = 51;
                  }
                  optional interface_ref_type interface_ref = 152;
                  message interface_ref_type {
                     optional state_type state = 151;
                     message state_type {
                        optional string interface = 51;
                        optional uint32 subinterface = 52;
                     }
                  }
               }
               optional state_type state = 151;
               message state_type {
                  optional bool enabled = 51;
                  optional uint32 mtu = 52;
               }
            }
            optional ipv6_type ipv6 = 153;
            message ipv6_type {
               optional addresses_type addresses = 153;
               message addresses_type {
                  message address_list {
                     optional string ip = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional string ip = 51;
                        optional uint32 prefix_length = 52;
                        optional string type = 61;
                        optional string origin = 53;
                        optional string status = 54;
                     }
                  }
                  repeated address_list address = 151;
               }
               optional neighbors_type neighbors = 154;
               message neighbors_type {
                  message neighbor_list {
                     optional string ip = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional string ip = 51;
                        optional string link_layer_address = 52;
                        optional string origin = 53;
                        optional bool is_router = 54;
                        optional string neighbor_state = 55;
                        optional uint32 table_id = 56;
                        optional uint32 expiry = 58;
                        optional bool is_publish = 59;
                        optional string interface_name = 60;
                     }
                  }
                  repeated neighbor_list neighbor = 152;
               }
               optional unnumbered_type unnumbered = 152;
               message unnumbered_type {
                  optional state_type state = 151;
                  message state_type {
                     optional bool enabled = 51;
                  }
                  optional interface_ref_type interface_ref = 152;
                  message interface_ref_type {
                     optional state_type state = 151;
                     message state_type {
                        optional string interface = 51;
                        optional uint32 subinterface = 52;
                     }
                  }
               }
               optional state_type state = 151;
               message state_type {
                  optional bool enabled = 51;
                  optional uint32 mtu = 52;
                  optional uint32 dup_addr_detect_transmits = 53;
               }
            }
            optional vlan_type vlan = 162;
            message vlan_type {
               optional match_type match = 163;
               message match_type {
                  optional single_tagged_list_type single_tagged_list = 170;
                  message single_tagged_list_type {
                     optional state_type state = 171;
                     message state_type {
                        repeated uint32 vlan_ids = 67;
                     }
                  }
                  optional single_tagged_range_type single_tagged_range = 164;
                  message single_tagged_range_type {
                     optional state_type state = 165;
                     message state_type {
                        optional uint32 low_vlan_id = 61;
                        optional uint32 high_vlan_id = 62;
                     }
                  }
                  optional double_tagged_inner_list_type double_tagged_inner_list = 166;
                  message double_tagged_inner_list_type {
                     optional state_type state = 167;
                     message state_type {
                        repeated uint32 inner_vlan_ids = 68;
                        optional uint32 outer_vlan_id = 63;
                     }
                  }
                  optional double_tagged_inner_range_type double_tagged_inner_range = 168;
                  message double_tagged_inner_range_type {
                     optional state_type state = 169;
                     message state_type {
                        optional uint32 inner_low_vlan_id = 65;
                        optional uint32 inner_high_vlan_id = 64;
                        repeated uint32 outer_vlan_id = 66;
                     }
                  }
               }
               optional ingress_mapping_type ingress_mapping = 172;
               message ingress_mapping_type {
                  optional state_type state = 173;
                  message state_type {
                     optional string vlan_stack_action = 69;
                     optional uint32 vlan_id = 70;
                     optional string tpid = 71;
                  }
               }
               optional egress_mapping_type egress_mapping = 174;
               message egress_mapping_type {
                  optional state_type state = 175;
                  message state_type {
                     optional string vlan_stack_action = 72;
                     optional string tpid = 74;
                  }
               }
            }
         }
         repeated subinterface_list subinterface = 151;
      }
   }
   repeated interface_list interface = 151;
}
