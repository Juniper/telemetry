syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional network_instances_fwstatsd_evolved_ni_252 jnpr_network_instances_fwstatsd_evolved_ni_252_ext = 252;
}

message network_instances_fwstatsd_evolved_ni_252 {
   message network_instance_list {
      optional string name = 153 [(telemetry_options).is_key = true];
      optional state_type state = 154;
      message state_type {
         optional string name = 154;
      }
      optional policy_forwarding_type policy_forwarding = 155;
      message policy_forwarding_type {
         optional policies_type policies = 156;
         message policies_type {
            message policy_list {
               optional string policy_id = 51 [(telemetry_options).is_key = true];
               optional state_type state = 158;
               message state_type {
                  optional string policy_id = 51;
               }
               optional rules_type rules = 157;
               message rules_type {
                  message rule_list {
                     optional uint32 sequence_id = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 159;
                     message state_type {
                        optional uint32 sequence_id = 51;
                        optional uint64 matched_pkts = 59;
                        optional uint64 matched_octets = 60;
                     }
                     optional ipv4_type ipv4 = 160;
                     message ipv4_type {
                        optional state_type state = 161;
                        message state_type {
                           optional string source_address = 51;
                           optional string destination_address = 52;
                           optional uint32 dscp = 53;
                           repeated uint32 dscp_set = 56;
                           optional string protocol = 54;
                           optional uint32 hop_limit = 55;
                        }
                     }
                     optional ipv6_type ipv6 = 162;
                     message ipv6_type {
                        optional state_type state = 163;
                        message state_type {
                           optional string source_address = 51;
                           optional string destination_address = 52;
                           optional uint32 dscp = 53;
                           repeated uint32 dscp_set = 56;
                           optional string protocol = 54;
                           optional uint32 hop_limit = 55;
                        }
                     }
                     optional action_type action = 166;
                     message action_type {
                        optional state_type state = 167;
                        message state_type {
                           optional bool discard = 51;
                           optional string decap_network_instance = 53;
                           optional string decap_fallback_network_instance = 54;
                           optional string post_decap_network_instance = 55;
                           optional string network_instance = 52;
                        }
                        optional encapsulate_gre_type encapsulate_gre = 174;
                        message encapsulate_gre_type {
                           optional targets_type targets = 175;
                           message targets_type {
                              message target_list {
                                 optional string id = 51 [(telemetry_options).is_key = true];
                                 optional state_type state = 177;
                                 message state_type {
                                    optional string id = 51;
                                    optional string source = 52;
                                    optional string destination = 53;
                                 }
                              }
                              repeated target_list target = 176;
                           }
                        }
                     }
                  }
                  repeated rule_list rule = 158;
               }
            }
            repeated policy_list policy = 157;
         }
         optional interfaces_type interfaces = 168;
         message interfaces_type {
            message interface_list {
               optional string interface_id = 51 [(telemetry_options).is_key = true];
               optional state_type state = 171;
               message state_type {
                  optional string interface_id = 51;
                  optional string apply_forwarding_policy = 52;
                  optional string apply_vrf_selection_policy = 53;
               }
               optional interface_ref_type interface_ref = 172;
               message interface_ref_type {
                  optional state_type state = 173;
                  message state_type {
                     optional string interface = 51;
                     optional uint32 subinterface = 52;
                  }
               }
            }
            repeated interface_list interface = 170;
         }
      }
   }
   repeated network_instance_list network_instance = 152;
}
