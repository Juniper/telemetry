syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional system_260 jnpr_system_260_ext = 260;
}

message system_260 {
   optional state_type state = 51;
   message state_type {
      optional string login_banner = 53;
      optional string motd_banner = 54;
   }
   optional dns_type dns = 53;
   message dns_type {
      optional state_type state = 51;
      message state_type {
         repeated string search = 51;
      }
      optional servers_type servers = 52;
      message servers_type {
         message server_list {
            optional string address = 51 [(telemetry_options).is_key = true];
            optional state_type state = 52;
            message state_type {
               optional string address = 51;
               optional uint32 port = 52;
            }
         }
         repeated server_list server = 51;
      }
      optional host_entries_type host_entries = 53;
      message host_entries_type {
         message host_entry_list {
            optional string hostname = 51 [(telemetry_options).is_key = true];
            optional state_type state = 52;
            message state_type {
               optional string hostname = 51;
               repeated string alias = 52;
               repeated string ipv4_address = 53;
               repeated string ipv6_address = 54;
            }
         }
         repeated host_entry_list host_entry = 51;
      }
   }
   optional ntp_type ntp = 54;
   message ntp_type {
      optional state_type state = 51;
      message state_type {
         optional bool enabled = 51;
         optional bool enable_ntp_auth = 53;
      }
      optional ntp_keys_type ntp_keys = 52;
      message ntp_keys_type {
         message ntp_key_list {
            optional uint32 key_id = 51 [(telemetry_options).is_key = true];
            optional state_type state = 52;
            message state_type {
               optional uint32 key_id = 51;
               optional string key_type = 52;
               optional string key_value = 53;
            }
         }
         repeated ntp_key_list ntp_key = 51;
      }
      optional servers_type servers = 53;
      message servers_type {
         message server_list {
            optional string address = 51 [(telemetry_options).is_key = true];
            optional state_type state = 52;
            message state_type {
               optional string address = 51;
               optional uint32 port = 52;
               optional uint32 version = 53;
               optional string association_type = 54;
               optional bool iburst = 55;
               optional bool prefer = 56;
               optional string network_instance = 57;
            }
         }
         repeated server_list server = 51;
      }
   }
   optional ssh_server_type ssh_server = 55;
   message ssh_server_type {
      optional state_type state = 51;
      message state_type {
         optional bool enable = 51;
         optional string protocol_version = 52;
         optional uint32 timeout = 53;
      }
   }
   optional logging_type logging = 56;
   message logging_type {
      optional console_type console = 51;
      message console_type {
         optional selectors_type selectors = 52;
         message selectors_type {
            message selector_list {
               optional string facility = 51;
               optional string severity = 52;
               optional state_type state = 53;
               message state_type {
                  optional string facility = 51;
                  optional string severity = 52;
               }
            }
            repeated selector_list selector = 51;
         }
      }
      optional remote_servers_type remote_servers = 52;
      message remote_servers_type {
         message remote_server_list {
            optional string host = 51 [(telemetry_options).is_key = true];
            optional state_type state = 52;
            message state_type {
               optional string host = 51;
               optional string source_address = 52;
               optional string network_instance = 54;
               optional uint32 remote_port = 53;
            }
            optional selectors_type selectors = 53;
            message selectors_type {
               message selector_list {
                  optional string facility = 51;
                  optional string severity = 52;
                  optional state_type state = 53;
                  message state_type {
                     optional string facility = 51;
                     optional string severity = 52;
                  }
               }
               repeated selector_list selector = 51;
            }
         }
         repeated remote_server_list remote_server = 51;
      }
   }
   optional aaa_type aaa = 57;
   message aaa_type {
      optional authentication_type authentication = 52;
      message authentication_type {
         optional state_type state = 51;
         message state_type {
            repeated string authentication_method = 51;
         }
         optional admin_user_type admin_user = 52;
         message admin_user_type {
            optional state_type state = 51;
            message state_type {
               optional string admin_password_hashed = 51;
               optional string admin_username = 52;
            }
         }
         optional users_type users = 53;
         message users_type {
            message user_list {
               optional string username = 51 [(telemetry_options).is_key = true];
               optional state_type state = 52;
               message state_type {
                  optional string username = 51;
                  optional string password_hashed = 52;
                  optional string role = 53;
               }
            }
            repeated user_list user = 51;
         }
      }
      optional server_groups_type server_groups = 53;
      message server_groups_type {
         message server_group_list {
            optional string name = 51 [(telemetry_options).is_key = true];
            optional state_type state = 52;
            message state_type {
               optional string name = 51;
               optional string type = 52;
            }
            optional servers_type servers = 53;
            message servers_type {
               message server_list {
                  optional string address = 51 [(telemetry_options).is_key = true];
                  optional state_type state = 52;
                  message state_type {
                     optional string name = 51;
                     optional string address = 52;
                     optional uint32 timeout = 53;
                  }
                  optional tacacs_type tacacs = 53;
                  message tacacs_type {
                     optional state_type state = 51;
                     message state_type {
                        optional uint32 port = 51;
                        optional string secret_key = 52;
                        optional string source_address = 53;
                     }
                  }
                  optional radius_type radius = 54;
                  message radius_type {
                     optional state_type state = 51;
                     message state_type {
                        optional uint32 auth_port = 51;
                        optional uint32 acct_port = 56;
                        optional string secret_key = 53;
                        optional string source_address = 54;
                        optional uint32 retransmit_attempts = 55;
                     }
                  }
               }
               repeated server_list server = 51;
            }
         }
         repeated server_group_list server_group = 51;
      }
   }
}
