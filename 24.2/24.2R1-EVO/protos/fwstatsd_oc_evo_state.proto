syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional acl_fwstatsd_evolved_251 jnpr_acl_fwstatsd_evolved_251_ext = 251;
}

message acl_fwstatsd_evolved_251 {
   optional state_type state = 152;
   message state_type {
   }
   optional acl_sets_type acl_sets = 151;
   message acl_sets_type {
      message acl_set_list {
         optional string name = 51;
         optional string type = 52;
         optional state_type state = 150;
         message state_type {
            optional string name = 53;
            optional string type = 54;
            optional string description = 55;
         }
         optional acl_entries_type acl_entries = 152;
         message acl_entries_type {
            message acl_entry_list {
               optional uint32 sequence_id = 56 [(telemetry_options).is_key = true];
               optional state_type state = 153;
               message state_type {
                  optional uint32 sequence_id = 57;
                  optional string description = 58;
                  optional uint64 matched_packets = 59;
                  optional uint64 matched_octets = 60;
               }
               optional l2_type l2 = 157;
               message l2_type {
                  optional state_type state = 158;
                  message state_type {
                     optional string source_mac = 51;
                     optional string destination_mac = 52;
                     optional string ethertype = 53;
                  }
               }
               optional ipv4_type ipv4 = 154;
               message ipv4_type {
                  optional state_type state = 155;
                  message state_type {
                     optional string source_address = 51;
                     optional string destination_address = 52;
                     optional uint32 dscp = 53;
                     repeated uint32 dscp_set = 56;
                     optional string protocol = 54;
                     optional uint32 hop_limit = 55;
                  }
               }
               optional mpls_type mpls = 191;
               message mpls_type {
                  optional state_type state = 192;
                  message state_type {
                     optional uint32 traffic_class = 51;
                     optional string start_label_value = 52;
                     optional string end_label_value = 53;
                  }
               }
               optional ipv6_type ipv6 = 156;
               message ipv6_type {
                  optional state_type state = 157;
                  message state_type {
                     optional string source_address = 51;
                     optional string destination_address = 52;
                     optional uint32 dscp = 53;
                     repeated uint32 dscp_set = 56;
                     optional string protocol = 54;
                     optional uint32 hop_limit = 55;
                  }
               }
               optional transport_type transport = 159;
               message transport_type {
                  optional state_type state = 160;
                  message state_type {
                     optional string source_port = 51;
                     optional string destination_port = 52;
                     repeated string tcp_flags = 53;
                  }
               }
               optional input_interface_type input_interface = 163;
               message input_interface_type {
                  optional interface_ref_type interface_ref = 165;
                  message interface_ref_type {
                     optional state_type state = 166;
                     message state_type {
                        optional string interface = 51;
                        optional uint32 subinterface = 52;
                     }
                  }
               }
               optional actions_type actions = 161;
               message actions_type {
                  optional state_type state = 162;
                  message state_type {
                     optional string forwarding_action = 51;
                     optional string log_action = 52;
                  }
               }
            }
            repeated acl_entry_list acl_entry = 152;
         }
      }
      repeated acl_set_list acl_set = 151;
   }
   optional interfaces_type interfaces = 166;
   message interfaces_type {
      message interface_list {
         optional string id = 51 [(telemetry_options).is_key = true];
         optional state_type state = 168;
         message state_type {
            optional string id = 51;
         }
         optional interface_ref_type interface_ref = 170;
         message interface_ref_type {
            optional state_type state = 171;
            message state_type {
               optional string interface = 51;
               optional uint32 subinterface = 52;
            }
         }
         optional ingress_acl_sets_type ingress_acl_sets = 174;
         message ingress_acl_sets_type {
            message ingress_acl_set_list {
               optional string set_name = 51;
               optional string type = 52;
               optional state_type state = 176;
               message state_type {
                  optional string set_name = 51;
                  optional string type = 52;
               }
            }
            repeated ingress_acl_set_list ingress_acl_set = 175;
         }
         optional egress_acl_sets_type egress_acl_sets = 177;
         message egress_acl_sets_type {
            message egress_acl_set_list {
               optional string set_name = 51;
               optional string type = 52;
               optional state_type state = 179;
               message state_type {
                  optional string set_name = 51;
                  optional string type = 52;
               }
            }
            repeated egress_acl_set_list egress_acl_set = 178;
         }
      }
      repeated interface_list interface = 167;
   }
}
