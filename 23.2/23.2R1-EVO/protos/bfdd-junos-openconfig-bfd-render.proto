syntax = "proto2";

import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional bfd_242 jnpr_bfd_242_ext = 242;
}

message bfd_242 {
   optional interfaces_type interfaces = 152;
   message interfaces_type {
      message interface_list {
         optional string id = 50 [(telemetry_options).is_key = true];
         optional state_type state = 150;
         message state_type {
            optional string id = 51;
            optional bool enabled = 52;
            optional string local_address = 53;
            optional uint32 desired_minimum_tx_interval = 54;
            optional uint32 required_minimum_receive = 55;
            optional uint32 detection_multiplier = 56;
            optional bool enable_per_member_link = 57;
         }
         optional micro_bfd_sessions_type micro_bfd_sessions = 149;
         message micro_bfd_sessions_type {
            message micro_bfd_session_list {
               optional string member_interface = 51 [(telemetry_options).is_key = true];
               optional state_type state = 147;
               message state_type {
                  optional string local_address = 51;
                  optional string remote_address = 52;
                  optional string member_interface = 53;
                  optional string session_state = 63;
                  optional string remote_session_state = 64;
                  optional uint64 last_failure_time = 65;
                  optional uint64 failure_transitions = 66;
                  optional string local_discriminator = 67;
                  optional string remote_discriminator = 68;
                  optional string local_diagnostic_code = 69;
                  optional string remote_diagnostic_code = 70;
                  optional uint32 remote_minimum_receive_interval = 71;
                  optional bool demand_mode_requested = 72;
                  optional bool remote_authentication_enabled = 73;
                  optional bool remote_control_plane_independent = 74;
               }
            }
            repeated micro_bfd_session_list micro_bfd_session = 148;
         }
         optional peers_type peers = 145;
         message peers_type {
            message peer_list {
               optional string local_discriminator = 51 [(telemetry_options).is_key = true];
               optional state_type state = 143;
               message state_type {
                  optional string local_address = 51;
                  optional string remote_address = 52;
                  repeated string subscribed_protocols = 53;
                  optional string session_state = 63;
                  optional string remote_session_state = 64;
                  optional uint64 last_failure_time = 65;
                  optional uint64 failure_transitions = 66;
                  optional string local_discriminator = 67;
                  optional string remote_discriminator = 68;
                  optional string local_diagnostic_code = 69;
                  optional string remote_diagnostic_code = 70;
                  optional uint32 remote_minimum_receive_interval = 71;
                  optional bool demand_mode_requested = 72;
                  optional bool remote_authentication_enabled = 73;
                  optional bool remote_control_plane_independent = 74;
                  optional echo_type echo = 142;
                  message echo_type {
                     optional bool active = 51;
                  }
               }
            }
            repeated peer_list peer = 144;
         }
      }
      repeated interface_list interface = 151;
   }
}
